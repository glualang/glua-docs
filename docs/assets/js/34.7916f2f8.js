(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{354:function(n,e,t){"use strict";t.r(e);var a=t(33),r=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"函数定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[n._v("#")]),n._v(" 函数定义")]),n._v(" "),t("p",[n._v("可以定义匿名函数，也可以定义命名函数（但是不能定义全局函数名称），也可以创建闭包")]),n._v(" "),t("p",[n._v("比如")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let abc = function(n: number) \n        return n + 1\n        end\nlet function add2(n: number)\n    return n+2\nend\n\nlet M = {}\nfunction M:sayHi()\n    if 2 < 1 then\n        return\n    end\n    print('Hi')\nend\n")])])]),t("p",[n._v("函数的代码块中可以有return语句，表示返回0个或一个值给调用者，也可以没有return语句。但是return语句后同条件分支后面，本函数体不能有其他语句")]),n._v(" "),t("p",[n._v("比如")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let abc = function (n: number)\n    return n+1\n    pprint(n)             -- 这里会编译报错，return语句后不应该有其他语句\nend\n")])])]),t("p",[n._v("函数的参数声明可以带有参数类型声明，语法形如： (name: string, age: int)，不带类型声明时这个参数的编译期类型是object类型")]),n._v(" "),t("h1",{attrs:{id:"更简化的函数表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更简化的函数表达式"}},[n._v("#")]),n._v(" 更简化的函数表达式")]),n._v(" "),t("p",[n._v("以上函数定义的语法也可以定义匿名函数，但是有时候一些简单匿名函数写起来不方便，所以提供更简化的函数表达式语法")]),n._v(" "),t("ul",[t("li",[n._v("单表达式函数")])]),n._v(" "),t("p",[n._v("函数体只能是单表达式，并且必须和函数参数在同一行")]),n._v(" "),t("p",[n._v("语法规则如下")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("Args => Expr\n")])])]),t("p",[n._v("比如")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let a1 = (a: number, b: number) => a + b  -- a1类型是(number, number) => number\nlet a2 = a1(1, 2) -- result is 3\n")])])]),t("ul",[t("li",[n._v("多行表达式函数")])]),n._v(" "),t("p",[n._v("函数体可以是多个语句，并且不限制必须在同一行")]),n._v(" "),t("p",[n._v("语法规则如下")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("Args => do\n    Block\nend\n")])])]),t("p",[n._v("比如")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("let a3 = (a: number, b: number) => do  \n    pprint(a + b)\n    return a + b\nend -- a3类型是(number, number) => number\nlet a4 = a3(1, 2) -- 输出3并a4设为3\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);